<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pwd.initializr.monitor.persistence.dao.HostMemorySwapDao">

  <resultMap id="HostSwapMap" type="pwd.initializr.monitor.persistence.entity.HostMemorySwapEntity">
    <result column="id" jdbcType="VARCHAR" property="id"/>
    <result column="total" jdbcType="BIGINT" property="total"/>
    <result column="used" jdbcType="BIGINT" property="used"/>
    <result column="free" jdbcType="BIGINT" property="free"/>
    <result column="page_in" jdbcType="BIGINT" property="pageIn"/>
    <result column="page_out" jdbcType="BIGINT" property="pageOut"/>
    <result column="able" jdbcType="INTEGER" property="able"/>
    <result column="del" jdbcType="INTEGER" property="del"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
  </resultMap>

  <!--根据主键查询查询-->
  <select id="queryById" resultMap="HostSwapMap">
    SELECT
      `id`,
      `total`,
      `used`,
      `free`,
      `page_in`,
      `page_out`,
      `able`,
      `del`,
      `create_time`,
      `update_time`
    FROM
      host_memory_swap
    WHERE
      id = #{id}
  </select>

  <!--查询指定行数据-->
  <select id="countByCondition" resultType="java.lang.Long">
    SELECT COUNT(*) FROM host_memory_swap
    <include refid="pwd.initializr.common.web.persistence.entity.ScopeEntity.entityQueryScope"></include>
  </select>

  <!--通过实体作为筛选条件查询-->
  <select id="queryByCondition" resultMap="HostSwapMap">
    SELECT
      `id`,
      `total`,
      `used`,
      `free`,
      `page_in`,
      `page_out`,
      `able`,
      `del`,
      `create_time`,
      `update_time`
    FROM
      host_memory_swap
    <include refid="pwd.initializr.common.web.persistence.entity.ScopeEntity.entityQueryScope"></include>
    <include refid="pwd.initializr.common.web.persistence.entity.SortEntity.entityQuerySort"></include>
    LIMIT
      #{offset}, #{limit}
  </select>

  <!--新增所有列-->
  <insert id="insert" keyProperty="id" useGeneratedKeys="true">
    INSERT INTO host_memory_swap
      (
        `id`,
        `total`,
        `used`,
        `free`,
        `page_in`,
        `page_out`,
        `able`,
        `del`,
        `create_time`,
        `update_time`
      )
    VALUES
      (
        #{entity.id},
        #{entity.total},
        #{entity.used},
        #{entity.free},
        #{entity.pageIn},
        #{entity.pageOut},
        #{entity.able},
        #{entity.del},
        #{entity.createTime},
        #{entity.updateTime}
      )
  </insert>

  <!--通过主键修改数据-->
  <update id="updateById">
    UPDATE host_memory_swap
    <set>
      <if test="entity.id != null and entity.id != ''">
        `id` = #{entity.id},
      </if>
      <if test="entity.total != null and entity.total != ''">
        `total` = #{entity.total},
      </if>
      <if test="entity.used != null and entity.used != ''">
        `used` = #{entity.used},
      </if>
      <if test="entity.free != null and entity.free != ''">
        `free` = #{entity.free},
      </if>
      <if test="entity.pageIn != null and entity.pageIn != ''">
        `page_in` = #{entity.pageIn},
      </if>
      <if test="entity.pageOut != null and entity.pageOut != ''">
        `page_out` = #{entity.pageOut},
      </if>
      <if test="entity.able != null and entity.able != ''">
        `able` = #{entity.able},
      </if>
      <if test="entity.del != null and entity.del != ''">
        `del` = #{entity.del},
      </if>
      <if test="entity.createTime != null and entity.createTime != ''">
        `create_time` = #{entity.createTime},
      </if>
      <if test="entity.updateTime != null and entity.updateTime != ''">
        `update_time` = #{entity.updateTime},
      </if>
    </set>
    WHERE
      id = #{id}
  </update>

  <!--通过主键删除-->
  <update id="deleteById">
    UPDATE host_memory_swap
    SET
      del = 1,
      update_time = now()
    WHERE
      id = #{id}
  </update>

  <!--通过主键批量删除-->
  <update id="deleteByIds">
    UPDATE host_memory_swap
    SET
      del = 1,
      update_time = now()
    WHERE
      id in
    <foreach close=")" collection="ids" index="index" item="id" open="(" separator=",">
      #{id}
    </foreach>
  </update>

  <!--通过主键启禁-->
  <update id="ableById">
    UPDATE host_memory_swap
    SET
      able = #{able},
      update_time = now()
    WHERE
      id = #{id}
  </update>

  <!--通过主键批量启禁-->
  <update id="ableByIds">
    UPDATE host_memory_swap
    SET
      able = #{able},
      update_time = now()
    WHERE
      id in
    <foreach close=")" collection="ids" index="index" item="id" open="(" separator=",">
      #{id}
    </foreach>
  </update>

</mapper>
