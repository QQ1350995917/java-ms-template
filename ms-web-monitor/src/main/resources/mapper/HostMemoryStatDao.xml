<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pwd.initializr.monitor.persistence.dao.HostMemoryStatDao">

  <resultMap id="HostMemoryStatMap" type="pwd.initializr.monitor.persistence.entity.HostMemoryStatEntity">
    <result column="group_name" jdbcType="VARCHAR" property="groupName"/>
    <result column="node_name" jdbcType="VARCHAR" property="nodeName"/>
    <result column="mem_total" jdbcType="INTEGER" property="memTotal"/>
    <result column="mem_free" jdbcType="INTEGER" property="memFree"/>
    <result column="mem_available" jdbcType="INTEGER" property="memAvailable"/>
    <result column="buffers" jdbcType="INTEGER" property="buffers"/>
    <result column="cached" jdbcType="INTEGER" property="cached"/>
    <result column="swap_cached" jdbcType="INTEGER" property="swapCached"/>
    <result column="active" jdbcType="INTEGER" property="active"/>
    <result column="inactive" jdbcType="INTEGER" property="inactive"/>
    <result column="active_anon" jdbcType="INTEGER" property="activeAnon"/>
    <result column="inactive_anon" jdbcType="INTEGER" property="inactiveAnon"/>
    <result column="active_file" jdbcType="INTEGER" property="activeFile"/>
    <result column="inactive_file" jdbcType="INTEGER" property="inactiveFile"/>
    <result column="unevictable" jdbcType="INTEGER" property="unevictable"/>
    <result column="mlocked" jdbcType="INTEGER" property="mlocked"/>
    <result column="swap_total" jdbcType="INTEGER" property="swapTotal"/>
    <result column="swap_free" jdbcType="INTEGER" property="swapFree"/>
    <result column="dirty" jdbcType="INTEGER" property="dirty"/>
    <result column="writeback" jdbcType="INTEGER" property="writeback"/>
    <result column="anon_pages" jdbcType="INTEGER" property="anonPages"/>
    <result column="mapped" jdbcType="INTEGER" property="mapped"/>
    <result column="shmem" jdbcType="INTEGER" property="shmem"/>
    <result column="slab" jdbcType="INTEGER" property="slab"/>
    <result column="s_reclaimable" jdbcType="INTEGER" property="sReclaimable"/>
    <result column="s_unreclaim" jdbcType="INTEGER" property="sUnreclaim"/>
    <result column="kernel_stack" jdbcType="INTEGER" property="kernelStack"/>
    <result column="page_tables" jdbcType="INTEGER" property="pageTables"/>
    <result column="n_fSUnstable" jdbcType="INTEGER" property="nFsunstable"/>
    <result column="bounce" jdbcType="INTEGER" property="bounce"/>
    <result column="writeback_tmp" jdbcType="INTEGER" property="writebackTmp"/>
    <result column="commit_limit" jdbcType="INTEGER" property="commitLimit"/>
    <result column="committed_aS" jdbcType="INTEGER" property="committedAs"/>
    <result column="vmalloc_total" jdbcType="INTEGER" property="vmallocTotal"/>
    <result column="vmalloc_used" jdbcType="INTEGER" property="vmallocUsed"/>
    <result column="vmalloc_chunk" jdbcType="INTEGER" property="vmallocChunk"/>
    <result column="hardware_corrupted" jdbcType="INTEGER" property="hardwareCorrupted"/>
    <result column="anon_huge_pages" jdbcType="INTEGER" property="anonHugePages"/>
    <result column="huge_pages_total" jdbcType="INTEGER" property="hugePagesTotal"/>
    <result column="huge_pages_free" jdbcType="INTEGER" property="hugePagesFree"/>
    <result column="huge_pages_rsvd" jdbcType="INTEGER" property="hugePagesRsvd"/>
    <result column="huge_pages_surp" jdbcType="INTEGER" property="hugePagesSurp"/>
    <result column="huge_pagesize" jdbcType="INTEGER" property="hugePagesize"/>
    <result column="direct_map4k" jdbcType="INTEGER" property="directMap4k"/>
    <result column="direct_map2M" jdbcType="INTEGER" property="directMap2m"/>
    <result column="able" jdbcType="INTEGER" property="able"/>
    <result column="del" jdbcType="INTEGER" property="del"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
  </resultMap>

  <!--根据主键查询查询-->
  <select id="queryById" resultMap="HostMemoryStatMap">
    SELECT
      `group_name`,
      `node_name`,
      `mem_total`,
      `mem_free`,
      `mem_available`,
      `buffers`,
      `cached`,
      `swap_cached`,
      `active`,
      `inactive`,
      `active_anon`,
      `inactive_anon`,
      `active_file`,
      `inactive_file`,
      `unevictable`,
      `mlocked`,
      `swap_total`,
      `swap_free`,
      `dirty`,
      `writeback`,
      `anon_pages`,
      `mapped`,
      `shmem`,
      `slab`,
      `s_reclaimable`,
      `s_unreclaim`,
      `kernel_stack`,
      `page_tables`,
      `n_fSUnstable`,
      `bounce`,
      `writeback_tmp`,
      `commit_limit`,
      `committed_aS`,
      `vmalloc_total`,
      `vmalloc_used`,
      `vmalloc_chunk`,
      `hardware_corrupted`,
      `anon_huge_pages`,
      `huge_pages_total`,
      `huge_pages_free`,
      `huge_pages_rsvd`,
      `huge_pages_surp`,
      `huge_pagesize`,
      `direct_map4k`,
      `direct_map2M`,
      `able`,
      `del`,
      `create_time`,
      `update_time`
    FROM
      host_memory_stat
    WHERE
      id = #{id}
  </select>

  <!--查询指定行数据-->
  <select id="countByCondition" resultType="java.lang.Long">
    SELECT COUNT(*) FROM host_memory_stat
    <include refid="pwd.initializr.common.web.persistence.entity.ScopeEntity.entityQueryScope"></include>
  </select>

  <!--通过实体作为筛选条件查询-->
  <select id="queryByCondition" resultMap="HostMemoryStatMap">
    SELECT
      `group_name`,
      `node_name`,
      `mem_total`,
      `mem_free`,
      `mem_available`,
      `buffers`,
      `cached`,
      `swap_cached`,
      `active`,
      `inactive`,
      `active_anon`,
      `inactive_anon`,
      `active_file`,
      `inactive_file`,
      `unevictable`,
      `mlocked`,
      `swap_total`,
      `swap_free`,
      `dirty`,
      `writeback`,
      `anon_pages`,
      `mapped`,
      `shmem`,
      `slab`,
      `s_reclaimable`,
      `s_unreclaim`,
      `kernel_stack`,
      `page_tables`,
      `n_fSUnstable`,
      `bounce`,
      `writeback_tmp`,
      `commit_limit`,
      `committed_aS`,
      `vmalloc_total`,
      `vmalloc_used`,
      `vmalloc_chunk`,
      `hardware_corrupted`,
      `anon_huge_pages`,
      `huge_pages_total`,
      `huge_pages_free`,
      `huge_pages_rsvd`,
      `huge_pages_surp`,
      `huge_pagesize`,
      `direct_map4k`,
      `direct_map2M`,
      `able`,
      `del`,
      `create_time`,
      `update_time`
    FROM
      host_memory_stat
    <include refid="pwd.initializr.common.web.persistence.entity.ScopeEntity.entityQueryScope"></include>
    <include refid="pwd.initializr.common.web.persistence.entity.SortEntity.entityQuerySort"></include>
    LIMIT
      #{offset}, #{limit}
  </select>

  <!--新增所有列-->
  <insert id="insert" keyProperty="id" useGeneratedKeys="true">
    INSERT INTO host_memory_stat
      (
        `group_name`,
        `node_name`,
        `mem_total`,
        `mem_free`,
        `mem_available`,
        `buffers`,
        `cached`,
        `swap_cached`,
        `active`,
        `inactive`,
        `active_anon`,
        `inactive_anon`,
        `active_file`,
        `inactive_file`,
        `unevictable`,
        `mlocked`,
        `swap_total`,
        `swap_free`,
        `dirty`,
        `writeback`,
        `anon_pages`,
        `mapped`,
        `shmem`,
        `slab`,
        `s_reclaimable`,
        `s_unreclaim`,
        `kernel_stack`,
        `page_tables`,
        `n_fSUnstable`,
        `bounce`,
        `writeback_tmp`,
        `commit_limit`,
        `committed_aS`,
        `vmalloc_total`,
        `vmalloc_used`,
        `vmalloc_chunk`,
        `hardware_corrupted`,
        `anon_huge_pages`,
        `huge_pages_total`,
        `huge_pages_free`,
        `huge_pages_rsvd`,
        `huge_pages_surp`,
        `huge_pagesize`,
        `direct_map4k`,
        `direct_map2M`,
        `able`,
        `del`,
        `create_time`,
        `update_time`
      )
    VALUES
      (
        #{entity.groupName},
        #{entity.nodeName},
        #{entity.memTotal},
        #{entity.memFree},
        #{entity.memAvailable},
        #{entity.buffers},
        #{entity.cached},
        #{entity.swapCached},
        #{entity.active},
        #{entity.inactive},
        #{entity.activeAnon},
        #{entity.inactiveAnon},
        #{entity.activeFile},
        #{entity.inactiveFile},
        #{entity.unevictable},
        #{entity.mlocked},
        #{entity.swapTotal},
        #{entity.swapFree},
        #{entity.dirty},
        #{entity.writeback},
        #{entity.anonPages},
        #{entity.mapped},
        #{entity.shmem},
        #{entity.slab},
        #{entity.sReclaimable},
        #{entity.sUnreclaim},
        #{entity.kernelStack},
        #{entity.pageTables},
        #{entity.nFsunstable},
        #{entity.bounce},
        #{entity.writebackTmp},
        #{entity.commitLimit},
        #{entity.committedAs},
        #{entity.vmallocTotal},
        #{entity.vmallocUsed},
        #{entity.vmallocChunk},
        #{entity.hardwareCorrupted},
        #{entity.anonHugePages},
        #{entity.hugePagesTotal},
        #{entity.hugePagesFree},
        #{entity.hugePagesRsvd},
        #{entity.hugePagesSurp},
        #{entity.hugePagesize},
        #{entity.directMap4k},
        #{entity.directMap2m},
        #{entity.able},
        #{entity.del},
        #{entity.createTime},
        #{entity.updateTime}
      )
  </insert>

  <!--新增所有列（批量新增）-->
  <insert id="insertByBatch" keyProperty="id" useGeneratedKeys="true">
    INSERT INTO host_memory_stat
    (
        `group_name`,
        `node_name`,
        `mem_total`,
        `mem_free`,
        `mem_available`,
        `buffers`,
        `cached`,
        `swap_cached`,
        `active`,
        `inactive`,
        `active_anon`,
        `inactive_anon`,
        `active_file`,
        `inactive_file`,
        `unevictable`,
        `mlocked`,
        `swap_total`,
        `swap_free`,
        `dirty`,
        `writeback`,
        `anon_pages`,
        `mapped`,
        `shmem`,
        `slab`,
        `s_reclaimable`,
        `s_unreclaim`,
        `kernel_stack`,
        `page_tables`,
        `n_fSUnstable`,
        `bounce`,
        `writeback_tmp`,
        `commit_limit`,
        `committed_aS`,
        `vmalloc_total`,
        `vmalloc_used`,
        `vmalloc_chunk`,
        `hardware_corrupted`,
        `anon_huge_pages`,
        `huge_pages_total`,
        `huge_pages_free`,
        `huge_pages_rsvd`,
        `huge_pages_surp`,
        `huge_pagesize`,
        `direct_map4k`,
        `direct_map2M`,
        `able`,
        `del`,
        `create_time`,
        `update_time`
    )
    VALUES
    <foreach collection="entities" item="entity" separator=",">
    (
        #{entity.groupName},
        #{entity.nodeName},
        #{entity.memTotal},
        #{entity.memFree},
        #{entity.memAvailable},
        #{entity.buffers},
        #{entity.cached},
        #{entity.swapCached},
        #{entity.active},
        #{entity.inactive},
        #{entity.activeAnon},
        #{entity.inactiveAnon},
        #{entity.activeFile},
        #{entity.inactiveFile},
        #{entity.unevictable},
        #{entity.mlocked},
        #{entity.swapTotal},
        #{entity.swapFree},
        #{entity.dirty},
        #{entity.writeback},
        #{entity.anonPages},
        #{entity.mapped},
        #{entity.shmem},
        #{entity.slab},
        #{entity.sReclaimable},
        #{entity.sUnreclaim},
        #{entity.kernelStack},
        #{entity.pageTables},
        #{entity.nFsunstable},
        #{entity.bounce},
        #{entity.writebackTmp},
        #{entity.commitLimit},
        #{entity.committedAs},
        #{entity.vmallocTotal},
        #{entity.vmallocUsed},
        #{entity.vmallocChunk},
        #{entity.hardwareCorrupted},
        #{entity.anonHugePages},
        #{entity.hugePagesTotal},
        #{entity.hugePagesFree},
        #{entity.hugePagesRsvd},
        #{entity.hugePagesSurp},
        #{entity.hugePagesize},
        #{entity.directMap4k},
        #{entity.directMap2m},
        #{entity.able},
        #{entity.del},
        #{entity.createTime},
        #{entity.updateTime}
    )
    </foreach>
  </insert>

  <!--新增或者替换所有列-->
  <insert id="insertOrReplace" keyProperty="id" useGeneratedKeys="true">
    REPLACE INTO host_memory_stat
    (
        `group_name`,
        `node_name`,
        `mem_total`,
        `mem_free`,
        `mem_available`,
        `buffers`,
        `cached`,
        `swap_cached`,
        `active`,
        `inactive`,
        `active_anon`,
        `inactive_anon`,
        `active_file`,
        `inactive_file`,
        `unevictable`,
        `mlocked`,
        `swap_total`,
        `swap_free`,
        `dirty`,
        `writeback`,
        `anon_pages`,
        `mapped`,
        `shmem`,
        `slab`,
        `s_reclaimable`,
        `s_unreclaim`,
        `kernel_stack`,
        `page_tables`,
        `n_fSUnstable`,
        `bounce`,
        `writeback_tmp`,
        `commit_limit`,
        `committed_aS`,
        `vmalloc_total`,
        `vmalloc_used`,
        `vmalloc_chunk`,
        `hardware_corrupted`,
        `anon_huge_pages`,
        `huge_pages_total`,
        `huge_pages_free`,
        `huge_pages_rsvd`,
        `huge_pages_surp`,
        `huge_pagesize`,
        `direct_map4k`,
        `direct_map2M`,
        `able`,
        `del`,
        `create_time`,
        `update_time`
    )
    VALUES
    (
        #{entity.groupName},
        #{entity.nodeName},
        #{entity.memTotal},
        #{entity.memFree},
        #{entity.memAvailable},
        #{entity.buffers},
        #{entity.cached},
        #{entity.swapCached},
        #{entity.active},
        #{entity.inactive},
        #{entity.activeAnon},
        #{entity.inactiveAnon},
        #{entity.activeFile},
        #{entity.inactiveFile},
        #{entity.unevictable},
        #{entity.mlocked},
        #{entity.swapTotal},
        #{entity.swapFree},
        #{entity.dirty},
        #{entity.writeback},
        #{entity.anonPages},
        #{entity.mapped},
        #{entity.shmem},
        #{entity.slab},
        #{entity.sReclaimable},
        #{entity.sUnreclaim},
        #{entity.kernelStack},
        #{entity.pageTables},
        #{entity.nFsunstable},
        #{entity.bounce},
        #{entity.writebackTmp},
        #{entity.commitLimit},
        #{entity.committedAs},
        #{entity.vmallocTotal},
        #{entity.vmallocUsed},
        #{entity.vmallocChunk},
        #{entity.hardwareCorrupted},
        #{entity.anonHugePages},
        #{entity.hugePagesTotal},
        #{entity.hugePagesFree},
        #{entity.hugePagesRsvd},
        #{entity.hugePagesSurp},
        #{entity.hugePagesize},
        #{entity.directMap4k},
        #{entity.directMap2m},
        #{entity.able},
        #{entity.del},
        #{entity.createTime},
        #{entity.updateTime}
    )
  </insert>

  <!--新增或者替换所有列（批量新增或者替换）-->
  <insert id="insertOrReplaceByBatch" keyProperty="id" useGeneratedKeys="true">
    REPLACE INTO host_memory_stat
    (
        `group_name`,
        `node_name`,
        `mem_total`,
        `mem_free`,
        `mem_available`,
        `buffers`,
        `cached`,
        `swap_cached`,
        `active`,
        `inactive`,
        `active_anon`,
        `inactive_anon`,
        `active_file`,
        `inactive_file`,
        `unevictable`,
        `mlocked`,
        `swap_total`,
        `swap_free`,
        `dirty`,
        `writeback`,
        `anon_pages`,
        `mapped`,
        `shmem`,
        `slab`,
        `s_reclaimable`,
        `s_unreclaim`,
        `kernel_stack`,
        `page_tables`,
        `n_fSUnstable`,
        `bounce`,
        `writeback_tmp`,
        `commit_limit`,
        `committed_aS`,
        `vmalloc_total`,
        `vmalloc_used`,
        `vmalloc_chunk`,
        `hardware_corrupted`,
        `anon_huge_pages`,
        `huge_pages_total`,
        `huge_pages_free`,
        `huge_pages_rsvd`,
        `huge_pages_surp`,
        `huge_pagesize`,
        `direct_map4k`,
        `direct_map2M`,
        `able`,
        `del`,
        `create_time`,
        `update_time`
    )
    VALUES
    <foreach collection="entities" item="entity" separator=",">
      (
        #{entity.groupName},
        #{entity.nodeName},
        #{entity.memTotal},
        #{entity.memFree},
        #{entity.memAvailable},
        #{entity.buffers},
        #{entity.cached},
        #{entity.swapCached},
        #{entity.active},
        #{entity.inactive},
        #{entity.activeAnon},
        #{entity.inactiveAnon},
        #{entity.activeFile},
        #{entity.inactiveFile},
        #{entity.unevictable},
        #{entity.mlocked},
        #{entity.swapTotal},
        #{entity.swapFree},
        #{entity.dirty},
        #{entity.writeback},
        #{entity.anonPages},
        #{entity.mapped},
        #{entity.shmem},
        #{entity.slab},
        #{entity.sReclaimable},
        #{entity.sUnreclaim},
        #{entity.kernelStack},
        #{entity.pageTables},
        #{entity.nFsunstable},
        #{entity.bounce},
        #{entity.writebackTmp},
        #{entity.commitLimit},
        #{entity.committedAs},
        #{entity.vmallocTotal},
        #{entity.vmallocUsed},
        #{entity.vmallocChunk},
        #{entity.hardwareCorrupted},
        #{entity.anonHugePages},
        #{entity.hugePagesTotal},
        #{entity.hugePagesFree},
        #{entity.hugePagesRsvd},
        #{entity.hugePagesSurp},
        #{entity.hugePagesize},
        #{entity.directMap4k},
        #{entity.directMap2m},
        #{entity.able},
        #{entity.del},
        #{entity.createTime},
        #{entity.updateTime}
      )
    </foreach>
  </insert>

  <!--通过主键修改数据-->
  <update id="updateById">
    UPDATE host_memory_stat
    <set>
      <if test="entity.groupName != null and entity.groupName != ''">
        `group_name` = #{entity.groupName},
      </if>
      <if test="entity.nodeName != null and entity.nodeName != ''">
        `node_name` = #{entity.nodeName},
      </if>
      <if test="entity.memTotal != null and entity.memTotal != ''">
        `mem_total` = #{entity.memTotal},
      </if>
      <if test="entity.memFree != null and entity.memFree != ''">
        `mem_free` = #{entity.memFree},
      </if>
      <if test="entity.memAvailable != null and entity.memAvailable != ''">
        `mem_available` = #{entity.memAvailable},
      </if>
      <if test="entity.buffers != null and entity.buffers != ''">
        `buffers` = #{entity.buffers},
      </if>
      <if test="entity.cached != null and entity.cached != ''">
        `cached` = #{entity.cached},
      </if>
      <if test="entity.swapCached != null and entity.swapCached != ''">
        `swap_cached` = #{entity.swapCached},
      </if>
      <if test="entity.active != null and entity.active != ''">
        `active` = #{entity.active},
      </if>
      <if test="entity.inactive != null and entity.inactive != ''">
        `inactive` = #{entity.inactive},
      </if>
      <if test="entity.activeAnon != null and entity.activeAnon != ''">
        `active_anon` = #{entity.activeAnon},
      </if>
      <if test="entity.inactiveAnon != null and entity.inactiveAnon != ''">
        `inactive_anon` = #{entity.inactiveAnon},
      </if>
      <if test="entity.activeFile != null and entity.activeFile != ''">
        `active_file` = #{entity.activeFile},
      </if>
      <if test="entity.inactiveFile != null and entity.inactiveFile != ''">
        `inactive_file` = #{entity.inactiveFile},
      </if>
      <if test="entity.unevictable != null and entity.unevictable != ''">
        `unevictable` = #{entity.unevictable},
      </if>
      <if test="entity.mlocked != null and entity.mlocked != ''">
        `mlocked` = #{entity.mlocked},
      </if>
      <if test="entity.swapTotal != null and entity.swapTotal != ''">
        `swap_total` = #{entity.swapTotal},
      </if>
      <if test="entity.swapFree != null and entity.swapFree != ''">
        `swap_free` = #{entity.swapFree},
      </if>
      <if test="entity.dirty != null and entity.dirty != ''">
        `dirty` = #{entity.dirty},
      </if>
      <if test="entity.writeback != null and entity.writeback != ''">
        `writeback` = #{entity.writeback},
      </if>
      <if test="entity.anonPages != null and entity.anonPages != ''">
        `anon_pages` = #{entity.anonPages},
      </if>
      <if test="entity.mapped != null and entity.mapped != ''">
        `mapped` = #{entity.mapped},
      </if>
      <if test="entity.shmem != null and entity.shmem != ''">
        `shmem` = #{entity.shmem},
      </if>
      <if test="entity.slab != null and entity.slab != ''">
        `slab` = #{entity.slab},
      </if>
      <if test="entity.sReclaimable != null and entity.sReclaimable != ''">
        `s_reclaimable` = #{entity.sReclaimable},
      </if>
      <if test="entity.sUnreclaim != null and entity.sUnreclaim != ''">
        `s_unreclaim` = #{entity.sUnreclaim},
      </if>
      <if test="entity.kernelStack != null and entity.kernelStack != ''">
        `kernel_stack` = #{entity.kernelStack},
      </if>
      <if test="entity.pageTables != null and entity.pageTables != ''">
        `page_tables` = #{entity.pageTables},
      </if>
      <if test="entity.nFsunstable != null and entity.nFsunstable != ''">
        `n_fSUnstable` = #{entity.nFsunstable},
      </if>
      <if test="entity.bounce != null and entity.bounce != ''">
        `bounce` = #{entity.bounce},
      </if>
      <if test="entity.writebackTmp != null and entity.writebackTmp != ''">
        `writeback_tmp` = #{entity.writebackTmp},
      </if>
      <if test="entity.commitLimit != null and entity.commitLimit != ''">
        `commit_limit` = #{entity.commitLimit},
      </if>
      <if test="entity.committedAs != null and entity.committedAs != ''">
        `committed_aS` = #{entity.committedAs},
      </if>
      <if test="entity.vmallocTotal != null and entity.vmallocTotal != ''">
        `vmalloc_total` = #{entity.vmallocTotal},
      </if>
      <if test="entity.vmallocUsed != null and entity.vmallocUsed != ''">
        `vmalloc_used` = #{entity.vmallocUsed},
      </if>
      <if test="entity.vmallocChunk != null and entity.vmallocChunk != ''">
        `vmalloc_chunk` = #{entity.vmallocChunk},
      </if>
      <if test="entity.hardwareCorrupted != null and entity.hardwareCorrupted != ''">
        `hardware_corrupted` = #{entity.hardwareCorrupted},
      </if>
      <if test="entity.anonHugePages != null and entity.anonHugePages != ''">
        `anon_huge_pages` = #{entity.anonHugePages},
      </if>
      <if test="entity.hugePagesTotal != null and entity.hugePagesTotal != ''">
        `huge_pages_total` = #{entity.hugePagesTotal},
      </if>
      <if test="entity.hugePagesFree != null and entity.hugePagesFree != ''">
        `huge_pages_free` = #{entity.hugePagesFree},
      </if>
      <if test="entity.hugePagesRsvd != null and entity.hugePagesRsvd != ''">
        `huge_pages_rsvd` = #{entity.hugePagesRsvd},
      </if>
      <if test="entity.hugePagesSurp != null and entity.hugePagesSurp != ''">
        `huge_pages_surp` = #{entity.hugePagesSurp},
      </if>
      <if test="entity.hugePagesize != null and entity.hugePagesize != ''">
        `huge_pagesize` = #{entity.hugePagesize},
      </if>
      <if test="entity.directMap4k != null and entity.directMap4k != ''">
        `direct_map4k` = #{entity.directMap4k},
      </if>
      <if test="entity.directMap2m != null and entity.directMap2m != ''">
        `direct_map2M` = #{entity.directMap2m},
      </if>
      <if test="entity.able != null and entity.able != ''">
        `able` = #{entity.able},
      </if>
      <if test="entity.del != null and entity.del != ''">
        `del` = #{entity.del},
      </if>
      <if test="entity.createTime != null and entity.createTime != ''">
        `create_time` = #{entity.createTime},
      </if>
      <if test="entity.updateTime != null and entity.updateTime != ''">
        `update_time` = #{entity.updateTime},
      </if>
    </set>
    WHERE
      id = #{entity.id}
  </update>

  <!--通过主键删除-->
  <update id="deleteById">
    UPDATE host_memory_stat
    SET
      del = 1,
      update_time = now()
    WHERE
      id = #{id}
  </update>

  <!--通过主键批量删除-->
  <update id="deleteByIds">
    UPDATE host_memory_stat
    SET
      del = 1,
      update_time = now()
    WHERE
      id in
    <foreach close=")" collection="ids" index="index" item="id" open="(" separator=",">
      #{id}
    </foreach>
  </update>

  <!--通过主键启禁-->
  <update id="ableById">
    UPDATE host_memory_stat
    SET
      able = #{able},
      update_time = now()
    WHERE
      id = #{id}
  </update>

  <!--通过主键批量启禁-->
  <update id="ableByIds">
    UPDATE host_memory_stat
    SET
      able = #{able},
      update_time = now()
    WHERE
      id in
    <foreach close=")" collection="ids" index="index" item="id" open="(" separator=",">
      #{id}
    </foreach>
  </update>

</mapper>
