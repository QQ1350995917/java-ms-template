<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pwd.initializr.monitor.persistence.dao.HostLoggedStatDao">

  <resultMap id="HostLoggedStatMap" type="pwd.initializr.monitor.persistence.entity.HostLoggedStatEntity">
    <result column="group_name" jdbcType="VARCHAR" property="groupName"/>
    <result column="node_name" jdbcType="VARCHAR" property="nodeName"/>
    <result column="user" jdbcType="VARCHAR" property="user"/>
    <result column="tty" jdbcType="VARCHAR" property="tty"/>
    <result column="from" jdbcType="VARCHAR" property="from"/>
    <result column="login" jdbcType="VARCHAR" property="login"/>
    <result column="idle" jdbcType="VARCHAR" property="idle"/>
    <result column="jcpu" jdbcType="VARCHAR" property="jcpu"/>
    <result column="pcpu" jdbcType="VARCHAR" property="pcpu"/>
    <result column="what" jdbcType="VARCHAR" property="what"/>
    <result column="able" jdbcType="INTEGER" property="able"/>
    <result column="del" jdbcType="INTEGER" property="del"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
  </resultMap>

  <!--根据主键查询查询-->
  <select id="queryById" resultMap="HostLoggedStatMap">
    SELECT
      `group_name`,
      `node_name`,
      `user`,
      `tty`,
      `from`,
      `login`,
      `idle`,
      `jcpu`,
      `pcpu`,
      `what`,
      `able`,
      `del`,
      `create_time`,
      `update_time`
    FROM
      host_logged_stat
    WHERE
      id = #{id}
  </select>

  <!--查询指定行数据-->
  <select id="countByCondition" resultType="java.lang.Long">
    SELECT COUNT(*) FROM host_logged_stat
    <include refid="pwd.initializr.common.web.persistence.entity.ScopeEntity.entityQueryScope"></include>
  </select>

  <!--通过实体作为筛选条件查询-->
  <select id="queryByCondition" resultMap="HostLoggedStatMap">
    SELECT
      `group_name`,
      `node_name`,
      `user`,
      `tty`,
      `from`,
      `login`,
      `idle`,
      `jcpu`,
      `pcpu`,
      `what`,
      `able`,
      `del`,
      `create_time`,
      `update_time`
    FROM
      host_logged_stat
    <include refid="pwd.initializr.common.web.persistence.entity.ScopeEntity.entityQueryScope"></include>
    <include refid="pwd.initializr.common.web.persistence.entity.SortEntity.entityQuerySort"></include>
    LIMIT
      #{offset}, #{limit}
  </select>

  <!--新增所有列-->
  <insert id="insert" keyProperty="id" useGeneratedKeys="true">
    INSERT INTO host_logged_stat
      (
        `group_name`,
        `node_name`,
        `user`,
        `tty`,
        `from`,
        `login`,
        `idle`,
        `jcpu`,
        `pcpu`,
        `what`,
        `able`,
        `del`,
        `create_time`,
        `update_time`
      )
    VALUES
      (
        #{entity.groupName},
        #{entity.nodeName},
        #{entity.user},
        #{entity.tty},
        #{entity.from},
        #{entity.login},
        #{entity.idle},
        #{entity.jcpu},
        #{entity.pcpu},
        #{entity.what},
        #{entity.able},
        #{entity.del},
        #{entity.createTime},
        #{entity.updateTime}
      )
  </insert>

  <!--新增所有列（批量新增）-->
  <insert id="insertByBatch" keyProperty="id" useGeneratedKeys="true">
    INSERT INTO host_logged_stat
    (
        `group_name`,
        `node_name`,
        `user`,
        `tty`,
        `from`,
        `login`,
        `idle`,
        `jcpu`,
        `pcpu`,
        `what`,
        `able`,
        `del`,
        `create_time`,
        `update_time`
    )
    VALUES
    <foreach collection="entities" item="entity" separator=",">
    (
        #{entity.groupName},
        #{entity.nodeName},
        #{entity.user},
        #{entity.tty},
        #{entity.from},
        #{entity.login},
        #{entity.idle},
        #{entity.jcpu},
        #{entity.pcpu},
        #{entity.what},
        #{entity.able},
        #{entity.del},
        #{entity.createTime},
        #{entity.updateTime}
    )
    </foreach>
  </insert>

  <!--新增或者替换所有列-->
  <insert id="insertOrReplace" keyProperty="id" useGeneratedKeys="true">
    REPLACE INTO host_logged_stat
    (
        `group_name`,
        `node_name`,
        `user`,
        `tty`,
        `from`,
        `login`,
        `idle`,
        `jcpu`,
        `pcpu`,
        `what`,
        `able`,
        `del`,
        `create_time`,
        `update_time`
    )
    VALUES
    (
        #{entity.groupName},
        #{entity.nodeName},
        #{entity.user},
        #{entity.tty},
        #{entity.from},
        #{entity.login},
        #{entity.idle},
        #{entity.jcpu},
        #{entity.pcpu},
        #{entity.what},
        #{entity.able},
        #{entity.del},
        #{entity.createTime},
        #{entity.updateTime}
    )
  </insert>

  <!--新增或者替换所有列（批量新增或者替换）-->
  <insert id="insertOrReplaceByBatch" keyProperty="id" useGeneratedKeys="true">
    REPLACE INTO host_logged_stat
    (
        `group_name`,
        `node_name`,
        `user`,
        `tty`,
        `from`,
        `login`,
        `idle`,
        `jcpu`,
        `pcpu`,
        `what`,
        `able`,
        `del`,
        `create_time`,
        `update_time`
    )
    VALUES
    <foreach collection="entities" item="entity" separator=",">
      (
        #{entity.groupName},
        #{entity.nodeName},
        #{entity.user},
        #{entity.tty},
        #{entity.from},
        #{entity.login},
        #{entity.idle},
        #{entity.jcpu},
        #{entity.pcpu},
        #{entity.what},
        #{entity.able},
        #{entity.del},
        #{entity.createTime},
        #{entity.updateTime}
      )
    </foreach>
  </insert>

  <!--通过主键修改数据-->
  <update id="updateById">
    UPDATE host_logged_stat
    <set>
      <if test="entity.groupName != null and entity.groupName != ''">
        `group_name` = #{entity.groupName},
      </if>
      <if test="entity.nodeName != null and entity.nodeName != ''">
        `node_name` = #{entity.nodeName},
      </if>
      <if test="entity.user != null and entity.user != ''">
        `user` = #{entity.user},
      </if>
      <if test="entity.tty != null and entity.tty != ''">
        `tty` = #{entity.tty},
      </if>
      <if test="entity.from != null and entity.from != ''">
        `from` = #{entity.from},
      </if>
      <if test="entity.login != null and entity.login != ''">
        `login` = #{entity.login},
      </if>
      <if test="entity.idle != null and entity.idle != ''">
        `idle` = #{entity.idle},
      </if>
      <if test="entity.jcpu != null and entity.jcpu != ''">
        `jcpu` = #{entity.jcpu},
      </if>
      <if test="entity.pcpu != null and entity.pcpu != ''">
        `pcpu` = #{entity.pcpu},
      </if>
      <if test="entity.what != null and entity.what != ''">
        `what` = #{entity.what},
      </if>
      <if test="entity.able != null and entity.able != ''">
        `able` = #{entity.able},
      </if>
      <if test="entity.del != null and entity.del != ''">
        `del` = #{entity.del},
      </if>
      <if test="entity.createTime != null and entity.createTime != ''">
        `create_time` = #{entity.createTime},
      </if>
      <if test="entity.updateTime != null and entity.updateTime != ''">
        `update_time` = #{entity.updateTime},
      </if>
    </set>
    WHERE
      id = #{entity.id}
  </update>

  <!--通过主键删除-->
  <update id="deleteById">
    UPDATE host_logged_stat
    SET
      del = 1,
      update_time = now()
    WHERE
      id = #{id}
  </update>

  <!--通过主键批量删除-->
  <update id="deleteByIds">
    UPDATE host_logged_stat
    SET
      del = 1,
      update_time = now()
    WHERE
      id in
    <foreach close=")" collection="ids" index="index" item="id" open="(" separator=",">
      #{id}
    </foreach>
  </update>

  <!--通过主键启禁-->
  <update id="ableById">
    UPDATE host_logged_stat
    SET
      able = #{able},
      update_time = now()
    WHERE
      id = #{id}
  </update>

  <!--通过主键批量启禁-->
  <update id="ableByIds">
    UPDATE host_logged_stat
    SET
      able = #{able},
      update_time = now()
    WHERE
      id in
    <foreach close=")" collection="ids" index="index" item="id" open="(" separator=",">
      #{id}
    </foreach>
  </update>

</mapper>
