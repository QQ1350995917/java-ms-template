<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pwd.initializr.edu.persistence.dao.EduTermCourseTextbookArticleDao">

  <resultMap id="EduTermCourseTextbookArticleMap" type="pwd.initializr.edu.persistence.entity.EduTermCourseTextbookArticleEntity">
    <result column="id" jdbcType="BIGINT"
            property="id"/>
    <result column="pid" jdbcType="BIGINT"
            property="pid"/>
    <result column="title" jdbcType="VARCHAR"
            property="title"/>
    <result column="text" jdbcType="VARCHAR"
            property="text"/>
    <result column="media_path" jdbcType="VARCHAR"
            property="mediaPath"/>
    <result column="able" jdbcType="INTEGER"
            property="able"/>
    <result column="del" jdbcType="INTEGER"
            property="del"/>
    <result column="create_time" jdbcType="TIMESTAMP"
            property="createTime"/>
    <result column="update_time" jdbcType="TIMESTAMP"
            property="updateTime"/>
  </resultMap>

  <!--根据主键查询查询-->
  <select id="queryById" resultMap="EduTermCourseTextbookArticleMap">
    SELECT
      `id`,
      `pid`,
      `title`,
      `text`,
      `media_path`,
      `able`,
      `del`,
      `create_time`,
      `update_time`
    FROM
      edu_term_course_textbook_article
    WHERE
      id = #{id}
  </select>

  <!--查询指定行数据-->
  <select id="countByCondition" resultType="java.lang.Long">
    SELECT COUNT(*) FROM edu_term_course_textbook_article
    <include
        refid="pwd.initializr.common.web.persistence.entity.ScopeEntity.entityQueryScope"></include>
  </select>

  <!--通过实体作为筛选条件查询-->
  <select id="queryByCondition" resultMap="EduTermCourseTextbookArticleMap">
    SELECT
      `id`,
      `pid`,
      `title`,
      `text`,
      `media_path`,
      `able`,
      `del`,
      `create_time`,
      `update_time`
    FROM
      edu_term_course_textbook_article
    <include
        refid="pwd.initializr.common.web.persistence.entity.ScopeEntity.entityQueryScope"></include>
    <include
        refid="pwd.initializr.common.web.persistence.entity.SortEntity.entityQuerySort"></include>
    LIMIT
      #{offset}, #{limit}
  </select>

  <!--新增所有列-->
  <insert id="insert" keyProperty="id" useGeneratedKeys="true"
          parameterType="pwd.initializr.edu.persistence.entity.EduTermCourseTextbookArticleEntity">
    INSERT INTO edu_term_course_textbook_article
    (
      `id`,
      `pid`,
      `title`,
      `text`,
      `media_path`,
      `able`,
      `del`,
      `create_time`,
      `update_time`
    )
    VALUES
    (
      #{entity.id},
      #{entity.pid},
      #{entity.title},
      #{entity.text},
      #{entity.mediaPath},
      #{entity.able},
      #{entity.del},
      #{entity.createTime},
      #{entity.updateTime}
    )
  </insert>

  <!--新增所有列（批量新增）-->
  <insert id="insertByBatch" keyProperty="id" useGeneratedKeys="true"
          parameterType="pwd.initializr.edu.persistence.entity.EduTermCourseTextbookArticleEntity">
    INSERT INTO edu_term_course_textbook_article
    (
      `id`,
      `pid`,
      `title`,
      `text`,
      `media_path`,
      `able`,
      `del`,
      `create_time`,
      `update_time`
    )
    VALUES
    <foreach collection="entities" item="entity" separator=",">
    (
      #{entity.id},
      #{entity.pid},
      #{entity.title},
      #{entity.text},
      #{entity.mediaPath},
      #{entity.able},
      #{entity.del},
      #{entity.createTime},
      #{entity.updateTime}
    )
    </foreach>
  </insert>

  <!--新增或者替换所有列-->
  <insert id="insertOrReplace" keyProperty="id" useGeneratedKeys="true"
          parameterType="pwd.initializr.edu.persistence.entity.EduTermCourseTextbookArticleEntity">
    REPLACE INTO edu_term_course_textbook_article
    (
      `id`,
      `pid`,
      `title`,
      `text`,
      `media_path`,
      `able`,
      `del`,
      `create_time`,
      `update_time`
    )
    VALUES
    (
      #{entity.id},
      #{entity.pid},
      #{entity.title},
      #{entity.text},
      #{entity.mediaPath},
      #{entity.able},
      #{entity.del},
      #{entity.createTime},
      #{entity.updateTime}
    )
  </insert>

  <!--新增或者替换所有列（批量新增或者替换）-->
  <insert id="insertOrReplaceByBatch" keyProperty="id" useGeneratedKeys="true"
          parameterType="pwd.initializr.edu.persistence.entity.EduTermCourseTextbookArticleEntity">
    REPLACE INTO edu_term_course_textbook_article
    (
      `id`,
      `pid`,
      `title`,
      `text`,
      `media_path`,
      `able`,
      `del`,
      `create_time`,
      `update_time`
    )
    VALUES
    <foreach collection="entities" item="entity" separator=",">
    (
      #{entity.id},
      #{entity.pid},
      #{entity.title},
      #{entity.text},
      #{entity.mediaPath},
      #{entity.able},
      #{entity.del},
      #{entity.createTime},
      #{entity.updateTime}
    )
    </foreach>
  </insert>

  <!--通过主键修改数据-->
  <update id="updateById" parameterType="pwd.initializr.edu.persistence.entity.EduTermCourseTextbookArticleEntity">
    UPDATE edu_term_course_textbook_article
    <set>
      <if test="entity.id != null">
        `id` = #{entity.id},
      </if>
      <if test="entity.pid != null">
        `pid` = #{entity.pid},
      </if>
      <if test="entity.title != null and entity.title != ''">
        `title` = #{entity.title},
      </if>
      <if test="entity.text != null and entity.text != ''">
        `text` = #{entity.text},
      </if>
      <if test="entity.mediaPath != null and entity.mediaPath != ''">
        `media_path` = #{entity.mediaPath},
      </if>
      <if test="entity.able != null">
        `able` = #{entity.able},
      </if>
      <if test="entity.del != null">
        `del` = #{entity.del},
      </if>
      <if test="entity.createTime != null">
        `create_time` = #{entity.createTime},
      </if>
      <if test="entity.updateTime != null">
        `update_time` = #{entity.updateTime},
      </if>
    </set>
    WHERE
      id = #{entity.id}
  </update>

  <!--通过主键删除-->
  <update id="deleteById">
    UPDATE edu_term_course_textbook_article
    SET
      del = 1,
      update_time = #{date}
    WHERE
      id = #{id}
  </update>

  <!--通过主键批量删除-->
  <update id="deleteByIds">
    UPDATE edu_term_course_textbook_article
    SET
      del = 1,
      update_time = #{date}
    WHERE
      id
    IN
    <foreach close=")" collection="ids" index="index" item="id" open="(" separator=",">
      #{id}
    </foreach>
  </update>

  <!--通过主键启禁-->
  <update id="ableById">
    UPDATE edu_term_course_textbook_article
    SET
      able = #{able},
      update_time = #{date}
    WHERE
      id = #{id}
  </update>

  <!--通过主键批量启禁-->
  <update id="ableByIds">
    UPDATE edu_term_course_textbook_article
    SET
      able = #{able},
      update_time = #{date}
    WHERE
      id
    IN
    <foreach close=")" collection="ids" index="index" item="id" open="(" separator=",">
      #{id}
    </foreach>
  </update>

</mapper>
