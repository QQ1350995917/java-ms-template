<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pwd.initializr.edu.persistence.dao.ArticleContentDao">

  <resultMap id="ArticleContentMap" type="pwd.initializr.edu.persistence.entity.ArticleContentEntity">
    <result column="id" jdbcType="BIGINT" property="id"/>
    <result column="text" jdbcType="LONGTEXT" property="text"/>
    <result column="url" jdbcType="VARCHAR" property="url"/>
    <result column="remark" jdbcType="VARCHAR" property="remark"/>
    <result column="path" jdbcType="VARCHAR" property="path"/>
    <result column="able" jdbcType="INTEGER" property="able"/>
    <result column="del" jdbcType="INTEGER" property="del"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
  </resultMap>

  <!--根据主键查询查询-->
  <select id="queryById" resultMap="ArticleContentMap">
    SELECT
      `id`,
      `text`,
      `url`,
      `remark`,
      `path`,
      `able`,
      `del`,
      `create_time`,
      `update_time`
    FROM
      article_content
    WHERE
      id = #{id}
  </select>

  <!--查询指定行数据-->
  <select id="countByCondition" resultType="java.lang.Long">
    SELECT COUNT(*) FROM article_content
    <include refid="pwd.initializr.common.web.persistence.entity.ScopeEntity.entityQueryScope"></include>
  </select>

  <!--通过实体作为筛选条件查询-->
  <select id="queryByCondition" resultMap="ArticleContentMap">
    SELECT
      `id`,
      `text`,
      `url`,
      `remark`,
      `path`,
      `able`,
      `del`,
      `create_time`,
      `update_time`
    FROM
      article_content
    <include refid="pwd.initializr.common.web.persistence.entity.ScopeEntity.entityQueryScope"></include>
    <include refid="pwd.initializr.common.web.persistence.entity.SortEntity.entityQuerySort"></include>
    LIMIT
      #{offset}, #{limit}
  </select>

  <!--新增所有列-->
  <insert id="insert" keyProperty="id" useGeneratedKeys="true" parameterType="pwd.initializr.edu.persistence.entity.ArticleContentEntity">
    INSERT INTO article_content
      (
        `id`,
        `text`,
        `url`,
        `remark`,
        `path`,
        `able`,
        `del`,
        `create_time`,
        `update_time`
      )
    VALUES
      (
        #{entity.id},
        #{entity.text},
        #{entity.url},
        #{entity.remark},
        #{entity.path},
        #{entity.able},
        #{entity.del},
        #{entity.createTime},
        #{entity.updateTime}
      )
  </insert>

  <!--新增所有列（批量新增）-->
  <insert id="insertByBatch" keyProperty="id" useGeneratedKeys="true" parameterType="pwd.initializr.edu.persistence.entity.ArticleContentEntity">
    INSERT INTO article_content
    (
        `id`,
        `text`,
        `url`,
        `remark`,
        `path`,
        `able`,
        `del`,
        `create_time`,
        `update_time`
    )
    VALUES
    <foreach collection="entities" item="entity" separator=",">
    (
        #{entity.id},
        #{entity.text},
        #{entity.url},
        #{entity.remark},
        #{entity.path},
        #{entity.able},
        #{entity.del},
        #{entity.createTime},
        #{entity.updateTime}
    )
    </foreach>
  </insert>

  <!--新增或者替换所有列-->
  <insert id="insertOrReplace" keyProperty="id" useGeneratedKeys="true" parameterType="pwd.initializr.edu.persistence.entity.ArticleContentEntity">
    REPLACE INTO article_content
    (
        `id`,
        `text`,
        `url`,
        `remark`,
        `path`,
        `able`,
        `del`,
        `create_time`,
        `update_time`
    )
    VALUES
    (
        #{entity.id},
        #{entity.text},
        #{entity.url},
        #{entity.remark},
        #{entity.path},
        #{entity.able},
        #{entity.del},
        #{entity.createTime},
        #{entity.updateTime}
    )
  </insert>

  <!--新增或者替换所有列（批量新增或者替换）-->
  <insert id="insertOrReplaceByBatch" keyProperty="id" useGeneratedKeys="true" parameterType="pwd.initializr.edu.persistence.entity.ArticleContentEntity">
    REPLACE INTO article_content
    (
        `id`,
        `text`,
        `url`,
        `remark`,
        `path`,
        `able`,
        `del`,
        `create_time`,
        `update_time`
    )
    VALUES
    <foreach collection="entities" item="entity" separator=",">
      (
        #{entity.id},
        #{entity.text},
        #{entity.url},
        #{entity.remark},
        #{entity.path},
        #{entity.able},
        #{entity.del},
        #{entity.createTime},
        #{entity.updateTime}
      )
    </foreach>
  </insert>

  <!--通过主键修改数据-->
  <update id="updateById" parameterType="pwd.initializr.edu.persistence.entity.ArticleContentEntity">
    UPDATE article_content
    <set>
      <if test="entity.id != null and entity.id != ''">
        `id` = #{entity.id},
      </if>
      <if test="entity.text != null and entity.text != ''">
        `text` = #{entity.text},
      </if>
      <if test="entity.url != null and entity.url != ''">
        `url` = #{entity.url},
      </if>
      <if test="entity.remark != null and entity.remark != ''">
        `remark` = #{entity.remark},
      </if>
      <if test="entity.path != null and entity.path != ''">
        `path` = #{entity.path},
      </if>
      <if test="entity.able != null and entity.able != ''">
        `able` = #{entity.able},
      </if>
      <if test="entity.del != null and entity.del != ''">
        `del` = #{entity.del},
      </if>
      <if test="entity.createTime != null and entity.createTime != ''">
        `create_time` = #{entity.createTime},
      </if>
      <if test="entity.updateTime != null and entity.updateTime != ''">
        `update_time` = #{entity.updateTime},
      </if>
    </set>
    WHERE
      id = #{entity.id}
  </update>

  <!--通过主键删除-->
  <update id="deleteById">
    UPDATE article_content
    SET
      del = 1,
      update_time = now()
    WHERE
      id = #{id}
  </update>

  <!--通过主键批量删除-->
  <update id="deleteByIds">
    UPDATE article_content
    SET
      del = 1,
      update_time = now()
    WHERE
      id in
    <foreach close=")" collection="ids" index="index" item="id" open="(" separator=",">
      #{id}
    </foreach>
  </update>

  <!--通过主键启禁-->
  <update id="ableById">
    UPDATE article_content
    SET
      able = #{able},
      update_time = now()
    WHERE
      id = #{id}
  </update>

  <!--通过主键批量启禁-->
  <update id="ableByIds">
    UPDATE article_content
    SET
      able = #{able},
      update_time = now()
    WHERE
      id in
    <foreach close=")" collection="ids" index="index" item="id" open="(" separator=",">
      #{id}
    </foreach>
  </update>

</mapper>
