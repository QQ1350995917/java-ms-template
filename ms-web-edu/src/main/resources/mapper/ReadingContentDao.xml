<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pwd.initializr.edu.persistence.dao.ReadingContentDao">

  <resultMap id="ReadingContentMap" type="pwd.initializr.edu.persistence.entity.ReadingContentEntity">
    <result column="id" jdbcType="BIGINT" property="id"/>
    <result column="pid" jdbcType="BIGINT" property="pid"/>
    <result column="reading_name" jdbcType="VARCHAR" property="readingName"/>
    <result column="bpm_status" jdbcType="VARCHAR" property="bpmStatus"/>
    <result column="sys_org_code" jdbcType="VARCHAR" property="sysOrgCode"/>
    <result column="sys_company_code" jdbcType="VARCHAR" property="sysCompanyCode"/>
    <result column="sort" jdbcType="VARCHAR" property="sort"/>
    <result column="zuixiao" jdbcType="VARCHAR" property="zuixiao"/>
    <result column="zuida" jdbcType="VARCHAR" property="zuida"/>
    <result column="qus_count" jdbcType="VARCHAR" property="qusCount"/>
    <result column="score" jdbcType="VARCHAR" property="score"/>
    <result column="open" jdbcType="VARCHAR" property="open"/>
    <result column="content" jdbcType="VARCHAR" property="content"/>
    <result column="able" jdbcType="INTEGER" property="able"/>
    <result column="del" jdbcType="INTEGER" property="del"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
  </resultMap>

  <!--根据主键查询查询-->
  <select id="queryById" resultMap="ReadingContentMap">
    SELECT
      `id`,
      `pid`,
      `reading_name`,
      `bpm_status`,
      `sys_org_code`,
      `sys_company_code`,
      `sort`,
      `zuixiao`,
      `zuida`,
      `qus_count`,
      `score`,
      `open`,
      `content`,
      `able`,
      `del`,
      `create_time`,
      `update_time`
    FROM
      reading_content
    WHERE
      id = #{id}
  </select>

  <!--查询指定行数据-->
  <select id="countByCondition" resultType="java.lang.Long">
    SELECT COUNT(*) FROM reading_content
    <include refid="pwd.initializr.common.web.persistence.entity.ScopeEntity.entityQueryScope"></include>
  </select>

  <!--通过实体作为筛选条件查询-->
  <select id="queryByCondition" resultMap="ReadingContentMap">
    SELECT
      `id`,
      `pid`,
      `reading_name`,
      `bpm_status`,
      `sys_org_code`,
      `sys_company_code`,
      `sort`,
      `zuixiao`,
      `zuida`,
      `qus_count`,
      `score`,
      `open`,
      `content`,
      `able`,
      `del`,
      `create_time`,
      `update_time`
    FROM
      reading_content
    <include refid="pwd.initializr.common.web.persistence.entity.ScopeEntity.entityQueryScope"></include>
    <include refid="pwd.initializr.common.web.persistence.entity.SortEntity.entityQuerySort"></include>
    LIMIT
      #{offset}, #{limit}
  </select>

  <!--新增所有列-->
  <insert id="insert" keyProperty="id" useGeneratedKeys="true" parameterType="pwd.initializr.edu.persistence.entity.ReadingContentEntity">
    INSERT INTO reading_content
      (
        `id`,
        `pid`,
        `reading_name`,
        `bpm_status`,
        `sys_org_code`,
        `sys_company_code`,
        `sort`,
        `zuixiao`,
        `zuida`,
        `qus_count`,
        `score`,
        `open`,
        `content`,
        `able`,
        `del`,
        `create_time`,
        `update_time`
      )
    VALUES
      (
        #{entity.id},
        #{entity.pid},
        #{entity.readingName},
        #{entity.bpmStatus},
        #{entity.sysOrgCode},
        #{entity.sysCompanyCode},
        #{entity.sort},
        #{entity.zuixiao},
        #{entity.zuida},
        #{entity.qusCount},
        #{entity.score},
        #{entity.open},
        #{entity.content},
        #{entity.able},
        #{entity.del},
        #{entity.createTime},
        #{entity.updateTime}
      )
  </insert>

  <!--新增所有列（批量新增）-->
  <insert id="insertByBatch" keyProperty="id" useGeneratedKeys="true" parameterType="pwd.initializr.edu.persistence.entity.ReadingContentEntity">
    INSERT INTO reading_content
    (
        `id`,
        `pid`,
        `reading_name`,
        `bpm_status`,
        `sys_org_code`,
        `sys_company_code`,
        `sort`,
        `zuixiao`,
        `zuida`,
        `qus_count`,
        `score`,
        `open`,
        `content`,
        `able`,
        `del`,
        `create_time`,
        `update_time`
    )
    VALUES
    <foreach collection="entities" item="entity" separator=",">
    (
        #{entity.id},
        #{entity.pid},
        #{entity.readingName},
        #{entity.bpmStatus},
        #{entity.sysOrgCode},
        #{entity.sysCompanyCode},
        #{entity.sort},
        #{entity.zuixiao},
        #{entity.zuida},
        #{entity.qusCount},
        #{entity.score},
        #{entity.open},
        #{entity.content},
        #{entity.able},
        #{entity.del},
        #{entity.createTime},
        #{entity.updateTime}
    )
    </foreach>
  </insert>

  <!--新增或者替换所有列-->
  <insert id="insertOrReplace" keyProperty="id" useGeneratedKeys="true" parameterType="pwd.initializr.edu.persistence.entity.ReadingContentEntity">
    REPLACE INTO reading_content
    (
        `id`,
        `pid`,
        `reading_name`,
        `bpm_status`,
        `sys_org_code`,
        `sys_company_code`,
        `sort`,
        `zuixiao`,
        `zuida`,
        `qus_count`,
        `score`,
        `open`,
        `content`,
        `able`,
        `del`,
        `create_time`,
        `update_time`
    )
    VALUES
    (
        #{entity.id},
        #{entity.pid},
        #{entity.readingName},
        #{entity.bpmStatus},
        #{entity.sysOrgCode},
        #{entity.sysCompanyCode},
        #{entity.sort},
        #{entity.zuixiao},
        #{entity.zuida},
        #{entity.qusCount},
        #{entity.score},
        #{entity.open},
        #{entity.content},
        #{entity.able},
        #{entity.del},
        #{entity.createTime},
        #{entity.updateTime}
    )
  </insert>

  <!--新增或者替换所有列（批量新增或者替换）-->
  <insert id="insertOrReplaceByBatch" keyProperty="id" useGeneratedKeys="true" parameterType="pwd.initializr.edu.persistence.entity.ReadingContentEntity">
    REPLACE INTO reading_content
    (
        `id`,
        `pid`,
        `reading_name`,
        `bpm_status`,
        `sys_org_code`,
        `sys_company_code`,
        `sort`,
        `zuixiao`,
        `zuida`,
        `qus_count`,
        `score`,
        `open`,
        `content`,
        `able`,
        `del`,
        `create_time`,
        `update_time`
    )
    VALUES
    <foreach collection="entities" item="entity" separator=",">
      (
        #{entity.id},
        #{entity.pid},
        #{entity.readingName},
        #{entity.bpmStatus},
        #{entity.sysOrgCode},
        #{entity.sysCompanyCode},
        #{entity.sort},
        #{entity.zuixiao},
        #{entity.zuida},
        #{entity.qusCount},
        #{entity.score},
        #{entity.open},
        #{entity.content},
        #{entity.able},
        #{entity.del},
        #{entity.createTime},
        #{entity.updateTime}
      )
    </foreach>
  </insert>

  <!--通过主键修改数据-->
  <update id="updateById" parameterType="pwd.initializr.edu.persistence.entity.ReadingContentEntity">
    UPDATE reading_content
    <set>
      <if test="entity.id != null and entity.id != ''">
        `id` = #{entity.id},
      </if>
      <if test="entity.pid != null and entity.pid != ''">
        `pid` = #{entity.pid},
      </if>
      <if test="entity.readingName != null and entity.readingName != ''">
        `reading_name` = #{entity.readingName},
      </if>
      <if test="entity.bpmStatus != null and entity.bpmStatus != ''">
        `bpm_status` = #{entity.bpmStatus},
      </if>
      <if test="entity.sysOrgCode != null and entity.sysOrgCode != ''">
        `sys_org_code` = #{entity.sysOrgCode},
      </if>
      <if test="entity.sysCompanyCode != null and entity.sysCompanyCode != ''">
        `sys_company_code` = #{entity.sysCompanyCode},
      </if>
      <if test="entity.sort != null and entity.sort != ''">
        `sort` = #{entity.sort},
      </if>
      <if test="entity.zuixiao != null and entity.zuixiao != ''">
        `zuixiao` = #{entity.zuixiao},
      </if>
      <if test="entity.zuida != null and entity.zuida != ''">
        `zuida` = #{entity.zuida},
      </if>
      <if test="entity.qusCount != null and entity.qusCount != ''">
        `qus_count` = #{entity.qusCount},
      </if>
      <if test="entity.score != null and entity.score != ''">
        `score` = #{entity.score},
      </if>
      <if test="entity.open != null and entity.open != ''">
        `open` = #{entity.open},
      </if>
      <if test="entity.content != null and entity.content != ''">
        `content` = #{entity.content},
      </if>
      <if test="entity.able != null and entity.able != ''">
        `able` = #{entity.able},
      </if>
      <if test="entity.del != null and entity.del != ''">
        `del` = #{entity.del},
      </if>
      <if test="entity.createTime != null and entity.createTime != ''">
        `create_time` = #{entity.createTime},
      </if>
      <if test="entity.updateTime != null and entity.updateTime != ''">
        `update_time` = #{entity.updateTime},
      </if>
    </set>
    WHERE
      id = #{entity.id}
  </update>

  <!--通过主键删除-->
  <update id="deleteById">
    UPDATE reading_content
    SET
      del = 1,
      update_time = #{date}
    WHERE
      id = #{id}
  </update>

  <!--通过主键批量删除-->
  <update id="deleteByIds">
    UPDATE reading_content
    SET
      del = 1,
      update_time = #{date}
    WHERE
      id in
    <foreach close=")" collection="ids" index="index" item="id" open="(" separator=",">
      #{id}
    </foreach>
  </update>

  <!--通过主键启禁-->
  <update id="ableById">
    UPDATE reading_content
    SET
      able = #{able},
      update_time = #{date}
    WHERE
      id = #{id}
  </update>

  <!--通过主键批量启禁-->
  <update id="ableByIds">
    UPDATE reading_content
    SET
      able = #{able},
      update_time = #{date}
    WHERE
      id in
    <foreach close=")" collection="ids" index="index" item="id" open="(" separator=",">
      #{id}
    </foreach>
  </update>

</mapper>
