<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pwd.initializr.account.persistence.dao.AdminAccountDao">

  <resultMap id="AdminAccountMap"
    type="pwd.initializr.account.persistence.entity.AdminAccountEntity">
    <result column="id" jdbcType="INTEGER" property="id"/>
    <result column="uid" jdbcType="INTEGER" property="uid"/>
    <result column="login_name" jdbcType="VARCHAR" property="loginName"/>
    <result column="login_pwd" jdbcType="VARCHAR" property="loginPwd"/>
    <result column="pwd_time" jdbcType="TIMESTAMP" property="pwdTime"/>
    <result column="type" jdbcType="INTEGER" property="type"/>
    <result column="able" jdbcType="INTEGER" property="able"/>
    <result column="del" jdbcType="INTEGER" property="del"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
  </resultMap>

  <!--查询单个-->
  <select id="queryById" resultMap="AdminAccountMap">
        select
          id, uid, login_name, login_pwd, pwd_time, type, able, del, create_time, update_time
        from initializr_account.admin_account
        where id = #{id}
    </select>

  <!--登录查询-->
  <select id="queryByLoginNameAndPwd" resultMap="AdminAccountMap">
        select
          id, uid, login_name, login_pwd, pwd_time, type, able, del, create_time, update_time
        from initializr_account.admin_account
        where login_name = #{loginName} and login_pwd = #{loginPwd}
  </select>

  <!--查询指定行数据-->
  <select id="countAllByCondition" resultType="java.lang.Long">
    select count(*) from initializr_account.admin_account
    <include refid="countAndQueryAllByCondition"></include>
  </select>

  <!--通过实体作为筛选条件查询-->
  <select id="queryAllByCondition" resultMap="AdminAccountMap">
    select
    id, uid, login_name, login_pwd, pwd_time, type, able, del, create_time, update_time
    from initializr_account.admin_account
    <include refid="countAndQueryAllByCondition"></include>
    limit #{offset}, #{limit}
  </select>

  <select id="queryAllByUid" resultMap="AdminAccountMap">
    select
    id, uid, login_name, login_pwd, pwd_time, type, able, del, create_time, update_time
    from initializr_account.admin_account
    where uId = #{uid}
  </select>

  <sql id="countAndQueryAllByCondition">
    <where>
      <if test="adminAccountEntity.id != null">
        and id = #{adminAccountEntity.id}
      </if>
      <if test="adminAccountEntity.uid != null">
        and uid = #{adminAccountEntity.uid}
      </if>
      <if test="adminAccountEntity.loginName != null and adminAccountEntity.loginName != ''">
        and login_name = #{adminAccountEntity.loginName}
      </if>
      <if test="adminAccountEntity.loginPwd != null and adminAccountEntity.loginPwd != ''">
        and login_pwd = #{adminAccountEntity.loginPwd}
      </if>
      <if test="adminAccountEntity.pwdTime != null">
        and pwd_time = #{adminAccountEntity.pwdTime}
      </if>
      <if test="adminAccountEntity.type != null">
        and type = #{adminAccountEntity.type}
      </if>
      <if test="adminAccountEntity.able != null">
        and enable = #{adminAccountEntity.able}
      </if>
      <if test="adminAccountEntity.del != null">
        and del = #{adminAccountEntity.del}
      </if>
      <if test="adminAccountEntity.createTime != null">
        and create_time = #{adminAccountEntity.createTime}
      </if>
      <if test="adminAccountEntity.updateTime != null">
        and update_time = #{adminAccountEntity.updateTime}
      </if>
    </where>
  </sql>

  <!--新增所有列-->
  <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into initializr_account.admin_account(uid, login_name, login_pwd, pwd_time, type, able, del, create_time, update_time)
        values (#{uid}, #{loginName}, #{loginPwd}, #{pwdTime}, #{type}, #{able}, #{del}, #{createTime}, #{updateTime})
    </insert>

  <!--通过主键修改数据-->
  <update id="update">
    update initializr_account.admin_account
    <set>
      <if test="uid != null">
        uid = #{uid},
      </if>
      <if test="loginName != null and loginName != ''">
        login_name = #{loginName},
      </if>
      <if test="loginPwd != null and loginPwd != ''">
        login_pwd = #{loginPwd},
      </if>
      <if test="pwdTime != null">
        pwd_time = #{pwdTime},
      </if>
      <if test="type != null">
        type = #{type},
      </if>
      <if test="able != null">
        enable = #{able},
      </if>
      <if test="del != null">
        del = #{del},
      </if>
      <if test="createTime != null">
        create_time = #{createTime},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime},
      </if>
    </set>
    where id = #{id}
  </update>

  <!--通过主键删除-->
  <delete id="deleteById">
    update initializr_account.admin_account set del = 1, update_time = now() where id = #{id}
  </delete>

  <!--通过用户外键删除-->
  <update id="deleteByUserId">
    update initializr_account.admin_account set del = 1, update_time = now() where uid = #{userId}
  </update>

  <!--通过用户外键删除-->
  <update id="deleteByUserIds">
    update initializr_account.admin_account set del = 1, update_time = now() where uid where id in
    <foreach close=")" collection="userIds" index="index" item="userId" open="(" separator=",">
      #{userId}
    </foreach>
  </update>

  <!--通过主键启禁-->
  <update id="ableById">
    update initializr_account.admin_account set able = #{able}, update_time = now() where id = #{id}
  </update>

  <!--通过主键启禁-->
  <update id="ableByIds">
    update initializr_account.admin_account set able = #{able}, update_time = now() where id in
    <foreach close=")" collection="ids" index="index" item="id" open="(" separator=",">
      #{id}
    </foreach>
  </update>

  <!--通过用户外键启禁-->
  <update id="ableByUserId">
    update initializr_account.admin_account set able = #{able}, update_time = now() where uid = #{userId}
  </update>

  <!--通过用户外键启禁-->
  <update id="ableByUserIds">
    update initializr_account.admin_account set able = #{able}, update_time = now() where uid
    where id in
    <foreach close=")" collection="userIds" index="index" item="userId" open="(" separator=",">
      #{userId}
    </foreach>
  </update>


</mapper>
