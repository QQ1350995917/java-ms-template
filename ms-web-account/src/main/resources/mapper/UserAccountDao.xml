<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pwd.initializr.account.persistence.dao.UserAccountDao">

  <resultMap id="UserAccountMap" type="pwd.initializr.account.persistence.entity.UserAccountEntity">
    <result column="id" jdbcType="INTEGER" property="id"/>
    <result column="uid" jdbcType="INTEGER" property="uid"/>
    <result column="login_name" jdbcType="VARCHAR" property="loginName"/>
    <result column="login_pwd" jdbcType="VARCHAR" property="loginPwd"/>
    <result column="pwd_time" jdbcType="TIMESTAMP" property="pwdTime"/>
    <result column="type" jdbcType="INTEGER" property="type"/>
    <result column="enable" jdbcType="INTEGER" property="enable"/>
    <result column="del" jdbcType="INTEGER" property="del"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
  </resultMap>

  <!--查询单个-->
  <select id="queryById" resultMap="UserAccountMap">
        select
          id, uid, login_name, login_pwd, pwd_time, type, enable, del, create_time, update_time
        from initializr_account.user_account
        where id = #{id}
    </select>

  <!--查询指定行数据-->
  <select id="queryAllByLimit" resultMap="UserAccountMap">
        select
          id, uid, login_name, login_pwd, pwd_time, type, enable, del, create_time, update_time
        from initializr_account.user_account
        limit #{offset}, #{limit}
    </select>

  <!--通过实体作为筛选条件查询-->
  <select id="queryAll" resultMap="UserAccountMap">
    select
    id, uid, login_name, login_pwd, pwd_time, type, enable, del, create_time, update_time
    from initializr_account.user_account
    <where>
      <if test="id != null">
        and id = #{id}
      </if>
      <if test="uid != null">
        and uid = #{uid}
      </if>
      <if test="loginName != null and loginName != ''">
        and login_name = #{loginName}
      </if>
      <if test="loginPwd != null and loginPwd != ''">
        and login_pwd = #{loginPwd}
      </if>
      <if test="pwdTime != null">
        and pwd_time = #{pwdTime}
      </if>
      <if test="type != null">
        and type = #{type}
      </if>
      <if test="enable != null">
        and enable = #{enable}
      </if>
      <if test="del != null">
        and del = #{del}
      </if>
      <if test="createTime != null">
        and create_time = #{createTime}
      </if>
      <if test="updateTime != null">
        and update_time = #{updateTime}
      </if>
    </where>
  </select>

  <!--新增所有列-->
  <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into initializr_account.user_account(uid, login_name, login_pwd, pwd_time, type, enable, del, create_time, update_time)
        values (#{uid}, #{loginName}, #{loginPwd}, #{pwdTime}, #{type}, #{enable}, #{del}, #{createTime}, #{updateTime})
    </insert>

  <!--通过主键修改数据-->
  <update id="update">
    update initializr_account.user_account
    <set>
      <if test="uid != null">
        uid = #{uid},
      </if>
      <if test="loginName != null and loginName != ''">
        login_name = #{loginName},
      </if>
      <if test="loginPwd != null and loginPwd != ''">
        login_pwd = #{loginPwd},
      </if>
      <if test="pwdTime != null">
        pwd_time = #{pwdTime},
      </if>
      <if test="type != null">
        type = #{type},
      </if>
      <if test="enable != null">
        enable = #{enable},
      </if>
      <if test="del != null">
        del = #{del},
      </if>
      <if test="createTime != null">
        create_time = #{createTime},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime},
      </if>
    </set>
    where id = #{id}
  </update>

  <!--通过主键删除-->
  <delete id="deleteById">
        delete from initializr_account.user_account where id = #{id}
    </delete>

</mapper>