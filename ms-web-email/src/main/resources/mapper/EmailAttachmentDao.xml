<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pwd.initializr.email.persistence.dao.EmailAttachmentDao">

  <resultMap id="EmailAttachmentMap" type="pwd.initializr.email.persistence.entity.EmailAttachmentEntity">
    <result column="id" jdbcType="BIGINT" property="id"/>
    <result column="email_id" jdbcType="BIGINT" property="emailId"/>
    <result column="file_name" jdbcType="VARCHAR" property="fileName"/>
    <result column="cid" jdbcType="VARCHAR" property="cid"/>
    <result column="content_type" jdbcType="VARCHAR" property="contentType"/>
    <result column="url" jdbcType="VARCHAR" property="url"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
  </resultMap>

  <!--根据主键查询查询-->
  <select id="queryById" resultMap="EmailAttachmentMap">
    SELECT
      `id`,
      `email_id`,
      `file_name`,
      `cid`,
      `content_type`,
      `url`,
      `create_time`,
      `update_time`
    FROM
      email_attachment
    WHERE
      id = #{id}
  </select>

  <!--根据外键查询查询-->
  <select id="queryByEmailId" resultMap="EmailAttachmentMap">
    SELECT
      `id`,
      `email_id`,
      `file_name`,
      `cid`,
      `content_type`,
      `url`,
      `create_time`,
      `update_time`
    FROM
      email_attachment
    WHERE
      `email_id` = #{emailId}
  </select>

  <!--查询指定行数据-->
  <select id="countByCondition" resultType="java.lang.Long">
    SELECT COUNT(*) FROM email_attachment
    <include refid="pwd.initializr.common.web.persistence.entity.ScopeEntity.entityQueryScope"></include>
  </select>

  <!--通过实体作为筛选条件查询-->
  <select id="queryByCondition" resultMap="EmailAttachmentMap">
    SELECT
      `id`,
      `email_id`,
      `file_name`,
      `cid`,
      `content_type`,
      `url`,
      `create_time`,
      `update_time`
    FROM
      email_attachment
    <include refid="pwd.initializr.common.web.persistence.entity.ScopeEntity.entityQueryScope"></include>
    <include refid="pwd.initializr.common.web.persistence.entity.SortEntity.entityQuerySort"></include>
    LIMIT
      #{offset}, #{limit}
  </select>

  <!--新增所有列-->
  <insert id="insert" keyProperty="id" useGeneratedKeys="true" parameterType="pwd.initializr.email.persistence.entity.EmailAttachmentEntity">
    INSERT INTO email_attachment
      (
        `id`,
        `email_id`,
        `file_name`,
        `cid`,
        `content_type`,
        `url`,
        `create_time`,
        `update_time`
      )
    VALUES
      (
        #{entity.id},
        #{entity.emailId},
        #{entity.fileName},
        #{entity.cid},
        #{entity.contentType},
        #{entity.url},
        #{entity.createTime},
        #{entity.updateTime}
      )
  </insert>

  <!--新增所有列（批量新增）-->
  <insert id="insertByBatch" keyProperty="id" useGeneratedKeys="true" parameterType="pwd.initializr.email.persistence.entity.EmailAttachmentEntity">
    INSERT INTO email_attachment
    (
        `id`,
        `email_id`,
        `file_name`,
        `cid`,
        `content_type`,
        `url`,
        `create_time`,
        `update_time`
    )
    VALUES
    <foreach collection="entities" item="entity" separator=",">
    (
        #{entity.id},
        #{entity.emailId},
        #{entity.fileName},
        #{entity.cid},
        #{entity.contentType},
        #{entity.url},
        #{entity.createTime},
        #{entity.updateTime}
    )
    </foreach>
  </insert>

  <!--新增或者替换所有列-->
  <insert id="insertOrReplace" keyProperty="id" useGeneratedKeys="true" parameterType="pwd.initializr.email.persistence.entity.EmailAttachmentEntity">
    REPLACE INTO email_attachment
    (
        `id`,
        `email_id`,
        `file_name`,
        `cid`,
        `content_type`,
        `url`,
        `create_time`,
        `update_time`
    )
    VALUES
    (
        #{entity.id},
        #{entity.emailId},
        #{entity.fileName},
        #{entity.cid},
        #{entity.contentType},
        #{entity.url},
        #{entity.createTime},
        #{entity.updateTime}
    )
  </insert>

  <!--新增或者替换所有列（批量新增或者替换）-->
  <insert id="insertOrReplaceByBatch" keyProperty="id" useGeneratedKeys="true" parameterType="pwd.initializr.email.persistence.entity.EmailAttachmentEntity">
    REPLACE INTO email_attachment
    (
        `id`,
        `email_id`,
        `file_name`,
        `cid`,
        `content_type`,
        `url`,
        `create_time`,
        `update_time`
    )
    VALUES
    <foreach collection="entities" item="entity" separator=",">
      (
        #{entity.id},
        #{entity.emailId},
        #{entity.fileName},
        #{entity.cid},
        #{entity.contentType},
        #{entity.url},
        #{entity.createTime},
        #{entity.updateTime}
      )
    </foreach>
  </insert>

  <!--通过主键修改数据-->
  <update id="updateById" parameterType="pwd.initializr.email.persistence.entity.EmailAttachmentEntity">
    UPDATE email_attachment
    <set>
      <if test="entity.id != null and entity.id != ''">
        `id` = #{entity.id},
      </if>
      <if test="entity.emailId != null and entity.emailId != ''">
        `email_id` = #{entity.emailId},
      </if>
      <if test="entity.fileName != null and entity.fileName != ''">
        `file_name` = #{entity.fileName},
      </if>
      <if test="entity.cid != null and entity.cid != ''">
        `cid` = #{entity.cid},
      </if>
      <if test="entity.contentType != null and entity.contentType != ''">
        `content_type` = #{entity.contentType},
      </if>
      <if test="entity.url != null and entity.url != ''">
        `url` = #{entity.url},
      </if>
      <if test="entity.createTime != null and entity.createTime != ''">
        `create_time` = #{entity.createTime},
      </if>
      <if test="entity.updateTime != null and entity.updateTime != ''">
        `update_time` = #{entity.updateTime},
      </if>
    </set>
    WHERE
      id = #{entity.id}
  </update>

  <!--通过主键删除-->
  <update id="deleteById">
    UPDATE email_attachment
    SET
      del = 1,
      update_time = now()
    WHERE
      id = #{id}
  </update>

  <!--通过主键批量删除-->
  <update id="deleteByIds">
    UPDATE email_attachment
    SET
      del = 1,
      update_time = now()
    WHERE
      id in
    <foreach close=")" collection="ids" index="index" item="id" open="(" separator=",">
      #{id}
    </foreach>
  </update>

  <!--通过主键启禁-->
  <update id="ableById">
    UPDATE email_attachment
    SET
      able = #{able},
      update_time = now()
    WHERE
      id = #{id}
  </update>

  <!--通过主键批量启禁-->
  <update id="ableByIds">
    UPDATE email_attachment
    SET
      able = #{able},
      update_time = now()
    WHERE
      id in
    <foreach close=")" collection="ids" index="index" item="id" open="(" separator=",">
      #{id}
    </foreach>
  </update>

</mapper>
